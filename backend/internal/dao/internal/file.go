// =================================================================================
// This file is auto-generated by the GoFrame CLI tool. You may modify it as needed.
// =================================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// FileDao is the data access object for table file.
type FileDao struct {
	table   string      // table is the underlying table name of the DAO.
	group   string      // group is the database configuration group name of the current DAO.
	columns FileColumns // columns contains all the column names of table for convenient usage.
}

// FileColumns defines and stores column names for table file.
type FileColumns struct {
	Id           string // 文件ID
	Name         string // 文件名称
	OriginalName string // 原始文件名
	FileType     string // 文件类型
	FileSize     string // 文件大小
	FilePath     string // 文件路径
	MimeType     string // MIME类型
	Md5          string // MD5值
	Status       string // 状态
	CreatedAt    string // 创建时间
	UpdatedAt    string // 更新时间
}

// NewFileDao creates and returns a new DAO object for table file database operations.
func NewFileDao() *FileDao {
	return &FileDao{
		table:   "file",
		group:   "default",
		columns: fileColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *FileDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Ctx creates and returns a new context for database operations.
func (dao *FileDao) Ctx(ctx ...context.Context) *gdb.Model {
	return dao.Model(ctx...)
}

// Transaction wraps the transaction logic using the function f.
// It commits the transaction successfully if no error is returned from the function f,
// or else it rollbacks the transaction.
func (dao *FileDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

// Model creates and returns a new ORM model from current DAO.
func (dao *FileDao) Model(ctx ...context.Context) *gdb.Model {
	var actualCtx context.Context
	if len(ctx) > 0 {
		actualCtx = ctx[0]
	}
	return dao.DB().Model(dao.table).Safe().Ctx(actualCtx)
}

// Columns returns all column names of the table for current DAO.
func (dao *FileDao) Columns() FileColumns {
	return dao.columns
}

// Table returns the table name of the DAO.
func (dao *FileDao) Table() string {
	return dao.table
}

// Group returns the database configuration group name of the current DAO.
func (dao *FileDao) Group() string {
	return dao.group
}

// fileColumns holds the columns for table file.
var fileColumns = FileColumns{
	Id:           "id",
	Name:         "name",
	OriginalName: "original_name",
	FileType:     "file_type",
	FileSize:     "file_size",
	FilePath:     "file_path",
	MimeType:     "mime_type",
	Md5:          "md5",
	Status:       "status",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}
