# 项目通用开发规范

// 通用开发环境规范
const developmentEnvironment = {
    "language": "使用中文进行所有开发文档编写和交流",
    "system": "基于 Windows 系统进行开发",
    "commands": "优先使用 Windows PowerShell 命令行工具",
    "development": "以专业开发者标准进行代码开发和审查"
};

// 开发环境配置指南
const environmentGuidelines = `

1. 统一使用 Windows 开发环境
2. 使用 PowerShell 作为默认命令行工具
3. 避免使用 Linux 特定命令
4. 确保所有脚本兼容 Windows 环境
5. 使用 Windows 路径分隔符 (\)
6. 注意文件权限差异
`;

// 灵活性说明
// 注意：这是推荐的项目结构，但需要根据现有项目结构灵活调整
// 保持与现有项目架构的一致性，同时遵循最佳实践

// 项目架构和最佳实践
const projectBestPractices = [
    "遵循现有项目架构，保持代码整洁",
    "后端使用 GoFrame 框架规范",
    "前端遵循 Vue3 + TypeScript 开发规范",
    "使用 ESM 模块化规范组织代码",
    "实现清晰的前后端分层架构",
    "使用 Pinia 进行状态管理",
    "遵循 Element-Plus 组件库规范",
    "实现响应式设计和 Tailwindcss 样式规范"
];

// 项目结构
const projectStructure = `
├── backend/                    # GoFrame 后端项目
│   ├── api/                   # API 接口定义
│   ├── internal/
│   │   ├── cmd/              # 启动命令
│   │   ├── controller/       # 控制器层
│   │   ├── service/          # 服务层
│   │   ├── model/           # 数据模型
│   │   └── dao/             # 数据访问层
│   └── manifest/             # 配置文件
│
├── frontend/                  # Vue3 前端项目
│   ├── src/
│   │   ├── api/             # API 请求
│   │   ├── components/      # 通用组件
│   │   ├── views/          # 页面视图
│   │   ├── store/          # Pinia 状态管理
│   │   ├── router/         # 路由配置
│   │   └── utils/          # 工具函数
│   └── types/               # TypeScript 类型定义
`;

// 前端开发指南
const frontendGuidelines = `

1. 使用 Vue3 组合式 API
2. 遵循 TypeScript 类型规范
3. 使用 Element-Plus 组件库
4. 实现响应式设计
5. 使用 Tailwindcss 样式框架
6. 规范化 API 请求封装
7. 实现统一的错误处理
8. 遵循主题定制规范
`;

// 后端开发指南
const backendGuidelines = `

1. 遵循 GoFrame 框架规范
2. 实现规范的 RESTful API
3. 使用 SQLite 数据库
4. 实现统一的错误处理
5. 遵循依赖注入原则
6. 实现合理的日志记录
7. 遵循数据验证规范
`;

// 测试规范
const testingGuidelines = `

1. 前端单元测试使用 Vitest
2. 后端单元测试使用 GoTest
3. 实现接口测试
4. 保持合理的测试覆盖率
5. 实现端到端测试
`;

// 性能优化指南
const performanceGuidelines = `

1. 实现合理的前端缓存策略
2. 优化组件重渲染
3. 实现图片懒加载
4. 优化后端数据库查询
5. 实现合理的内存管理
6. 优化前端打包体积
7. 实现后端并发处理
`;
